26.4、日志级别
所有支持的日志系统都可以使用 logging.level.= 在 Spring Environment（例如，在 application.properties 文件中）中设置日志级别，其中 level 可以是其中之一：TRACE、DEBUG、INFO、WARN、ERROR、FATAL 或 OFF。可以使用 logging.level.root 配置 root 日志器。

下面的示例展示了 application.properties 中的可能的日志设置：

logging.level.root=WARN
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR

26.6、自定义日志配置
可以通过在类路径上包含适当的库来激活各种日志系统，还可以通过在类路径的根目录中或在由以下 Spring Environment 属性（logging.config）指定的位置提供适当的配置文件来进一步自定义日志系统。

通过使用 org.springframework.boot.logging.LoggingSystem 系统属性，可以强制 Spring Boot 使用特定的日志系统。该值应为 LoggingSystem 实现的完全限定类名。你还可以使用值 none 来完全禁用 Spring Boot 的日志配置。

注释：由于日志记录是在创建 ApplicationContext 之前初始化的，因此无法控制 Spring @Configuration 文件中 @PropertySources 的日志记录。更改或完全禁用日志系统的唯一方法是通过系统属性。

根据你的日志系统，将加载以下文件：

日志系统	定制
Logback	logback-spring.xml、logback-spring.groovy、logback.xml 或 logback.groovy
Log4j2	log4j2-spring.xml 或 log4j2.xml
JDK(Java Util Logging)	logging.properties
注释：如果可能，我们建议你在日志配置中使用 -spring 变体（例如，logback-spring.xml 而不是 logback.xml）。如果使用标准配置位置，Spring 无法完全控制日志初始化。

警告：Java Util Logging 存在一些已知的类加载问题，它会在从“可执行 jar”运行时造成问题。如果可能的话，我们建议你在从“可执行 jar”运行时避免使用它。

为了进行自定义，一些其他属性将从 Spring Environment 转移到系统属性，如下表所述：

Spring Environment	系统属性	解释
logging.exception-conversion-word	LOG_EXCEPTION_CONVERSION_WORD	记录异常时使用的转换字。
logging.file	LOG_FILE	如果已定义，则在默认日志配置中使用。
logging.file.max-size	LOG_FILE_MAX_SIZE	最大日志文件大小（如果启用了 LOG_FILE）。只支持默认的 Logback 设置。
logging.file.max-history	LOG_FILE_MAX_HISTORY	要保存的存档日志文件的最大数量（如果启用了 LOG_FILE）。仅在默认的 Logback 设置中受支持。
logging.path	LOG_PATH	如果已定义，则在默认日志配置中使用。
logging.pattern.console	CONSOLE_LOG_PATTERN	在控制台上使用的日志模式（stdout）。仅在默认的 Logback 设置中受支持。
logging.pattern.dateformat	LOG_DATEFORMAT_PATTERN	日志日期格式的追加器模式。仅在默认的 Logback 设置中受支持。
logging.pattern.file	FILE_LOG_PATTERN	要在文件中使用的日志模式（如果启用了 LOG_FILE）。仅在默认的 Logback 设置中受支持。
logging.pattern.level	LOG_LEVEL_PATTERN	呈现日志级别时使用的格式（默认是 %5p）。仅在默认的 Logback 设置中受支持。
PID	PID	当前进程ID（如果可能，在尚未定义为操作系统（OS）环境变量时发现）。
所有受支持的日志系统在分析其配置文件时都可以参考系统属性。有关示例，请参见 spring-boot.jar 中的默认配置：

（1）Logback

（2）Log4j2

（3）Java Util logging

提示：如果要在日志属性中使用占位符，应该使用 Spring Boot 的语法，而不是底层框架的语法。值得注意的是，如果使用 Logback，则应使用“:”作为属性名与其默认值之间的分隔符，而不是使用“:-”。

提示：你可以通过仅覆盖 LOG_LEVEL_PATTERN（或 Logback 的 logging.pattern.level），将 MDC 和其他特殊内容添加到日志行。例如，如果使用 logging.pattern.level=user:%X{user} %5p ，则默认日志格式包含“user”的 MDC 实体，如果存在，则如下面的示例所示：

2015-09-30 12:30:04.031 user:someone INFO 22174 --- [ nio-8080-exec-0] demo.Controller Handling authenticated request